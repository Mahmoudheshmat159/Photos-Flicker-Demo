//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MoviesStoryboard`.
    static let moviesStoryboard = _R.storyboard.moviesStoryboard()
    /// Storyboard `NoonWebView`.
    static let noonWebView = _R.storyboard.noonWebView()
    /// Storyboard `SplashStoryboard`.
    static let splashStoryboard = _R.storyboard.splashStoryboard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MoviesStoryboard", bundle: ...)`
    static func moviesStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.moviesStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NoonWebView", bundle: ...)`
    static func noonWebView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.noonWebView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SplashStoryboard", bundle: ...)`
    static func splashStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splashStoryboard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `accentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentColor")
    /// Color `backgroundColor`.
    static let backgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "backgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 15 files.
  struct file {
    /// Resource file `Almarai-Bold.ttf`.
    static let almaraiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-Bold", pathExtension: "ttf")
    /// Resource file `Almarai-ExtraBold.ttf`.
    static let almaraiExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-ExtraBold", pathExtension: "ttf")
    /// Resource file `Almarai-Light.ttf`.
    static let almaraiLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-Light", pathExtension: "ttf")
    /// Resource file `Almarai-Regular.ttf`.
    static let almaraiRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-Regular", pathExtension: "ttf")
    /// Resource file `NeoSansArabic-Light.ttf`.
    static let neoSansArabicLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NeoSansArabic-Light", pathExtension: "ttf")
    /// Resource file `NeoSansArabic-Medium.ttf`.
    static let neoSansArabicMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NeoSansArabic-Medium", pathExtension: "ttf")
    /// Resource file `NeoSansArabic-Regular.ttf`.
    static let neoSansArabicRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NeoSansArabic-Regular", pathExtension: "ttf")
    /// Resource file `NeoSansW23-Bold.ttf`.
    static let neoSansW23BoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NeoSansW23-Bold", pathExtension: "ttf")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `loading.json`.
    static let loadingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading", pathExtension: "json")
    /// Resource file `loading1.json`.
    static let loading1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading1", pathExtension: "json")
    /// Resource file `loading2.json`.
    static let loading2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading2", pathExtension: "json")
    /// Resource file `loading3.json`.
    static let loading3Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading3", pathExtension: "json")
    /// Resource file `loading4.json`.
    static let loading4Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading4", pathExtension: "json")
    /// Resource file `splash.json`.
    static let splashJson = Rswift.FileResource(bundle: R.hostingBundle, name: "splash", pathExtension: "json")

    /// `bundle.url(forResource: "Almarai-Bold", withExtension: "ttf")`
    static func almaraiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Almarai-ExtraBold", withExtension: "ttf")`
    static func almaraiExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Almarai-Light", withExtension: "ttf")`
    static func almaraiLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Almarai-Regular", withExtension: "ttf")`
    static func almaraiRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NeoSansArabic-Light", withExtension: "ttf")`
    static func neoSansArabicLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neoSansArabicLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NeoSansArabic-Medium", withExtension: "ttf")`
    static func neoSansArabicMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neoSansArabicMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NeoSansArabic-Regular", withExtension: "ttf")`
    static func neoSansArabicRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neoSansArabicRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NeoSansW23-Bold", withExtension: "ttf")`
    static func neoSansW23BoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.neoSansW23BoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading", withExtension: "json")`
    static func loadingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loadingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading1", withExtension: "json")`
    static func loading1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading2", withExtension: "json")`
    static func loading2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading2Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading3", withExtension: "json")`
    static func loading3Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading3Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading4", withExtension: "json")`
    static func loading4Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading4Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "splash", withExtension: "json")`
    static func splashJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.splashJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `Almarai-Bold`.
    static let almaraiBold = Rswift.FontResource(fontName: "Almarai-Bold")
    /// Font `Almarai-ExtraBold`.
    static let almaraiExtraBold = Rswift.FontResource(fontName: "Almarai-ExtraBold")
    /// Font `Almarai-Light`.
    static let almaraiLight = Rswift.FontResource(fontName: "Almarai-Light")
    /// Font `Almarai-Regular`.
    static let almaraiRegular = Rswift.FontResource(fontName: "Almarai-Regular")
    /// Font `NeoSansArabic-Bold`.
    static let neoSansArabicBold = Rswift.FontResource(fontName: "NeoSansArabic-Bold")
    /// Font `NeoSansArabic-Light`.
    static let neoSansArabicLight = Rswift.FontResource(fontName: "NeoSansArabic-Light")
    /// Font `NeoSansArabic-Medium`.
    static let neoSansArabicMedium = Rswift.FontResource(fontName: "NeoSansArabic-Medium")
    /// Font `NeoSansArabic`.
    static let neoSansArabic = Rswift.FontResource(fontName: "NeoSansArabic")

    /// `UIFont(name: "Almarai-Bold", size: ...)`
    static func almaraiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiBold, size: size)
    }

    /// `UIFont(name: "Almarai-ExtraBold", size: ...)`
    static func almaraiExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiExtraBold, size: size)
    }

    /// `UIFont(name: "Almarai-Light", size: ...)`
    static func almaraiLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiLight, size: size)
    }

    /// `UIFont(name: "Almarai-Regular", size: ...)`
    static func almaraiRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiRegular, size: size)
    }

    /// `UIFont(name: "NeoSansArabic", size: ...)`
    static func neoSansArabic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: neoSansArabic, size: size)
    }

    /// `UIFont(name: "NeoSansArabic-Bold", size: ...)`
    static func neoSansArabicBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: neoSansArabicBold, size: size)
    }

    /// `UIFont(name: "NeoSansArabic-Light", size: ...)`
    static func neoSansArabicLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: neoSansArabicLight, size: size)
    }

    /// `UIFont(name: "NeoSansArabic-Medium", size: ...)`
    static func neoSansArabicMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: neoSansArabicMedium, size: size)
    }

    static func validate() throws {
      if R.font.almaraiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-Bold' could not be loaded, is 'Almarai-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.almaraiExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-ExtraBold' could not be loaded, is 'Almarai-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.almaraiLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-Light' could not be loaded, is 'Almarai-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.almaraiRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-Regular' could not be loaded, is 'Almarai-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.neoSansArabic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NeoSansArabic' could not be loaded, is 'NeoSansArabic-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.neoSansArabicBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NeoSansArabic-Bold' could not be loaded, is 'NeoSansW23-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.neoSansArabicLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NeoSansArabic-Light' could not be loaded, is 'NeoSansArabic-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.neoSansArabicMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NeoSansArabic-Medium' could not be loaded, is 'NeoSansArabic-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `banner`.
    static let banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner", bundle: ..., traitCollection: ...)`
    static func banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `BannerCell`.
    static let bannerCell = _R.nib._BannerCell()
    /// Nib `BarView`.
    static let barView = _R.nib._BarView()
    /// Nib `CustomTabBarView`.
    static let customTabBarView = _R.nib._CustomTabBarView()
    /// Nib `EmptyScreen`.
    static let emptyScreen = _R.nib._EmptyScreen()
    /// Nib `HeaderView`.
    static let headerView = _R.nib._HeaderView()
    /// Nib `MaintanceScreen`.
    static let maintanceScreen = _R.nib._MaintanceScreen()
    /// Nib `MovieCell`.
    static let movieCell = _R.nib._MovieCell()
    /// Nib `NetworkFailScreen`.
    static let networkFailScreen = _R.nib._NetworkFailScreen()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BannerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bannerCell) instead")
    static func bannerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bannerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.barView) instead")
    static func barView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.barView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomTabBarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customTabBarView) instead")
    static func customTabBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTabBarView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyScreen", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyScreen) instead")
    static func emptyScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.headerView) instead")
    static func headerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MaintanceScreen", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.maintanceScreen) instead")
    static func maintanceScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.maintanceScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieCell) instead")
    static func movieCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NetworkFailScreen", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.networkFailScreen) instead")
    static func networkFailScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.networkFailScreen)
    }
    #endif

    static func bannerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BannerCell? {
      return R.nib.bannerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BannerCell
    }

    static func barView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.barView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customTabBarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customTabBarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyScreen(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyScreen.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func headerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.headerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func maintanceScreen(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.maintanceScreen.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func movieCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCell? {
      return R.nib.movieCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCell
    }

    static func networkFailScreen(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.networkFailScreen.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.headerView` struct is generated, and contains static references to 1 localization keys.
    struct headerView {
      /// ar translation: المـنـتـدى
      ///
      /// Locales: ar
      static let gKxCKAVDText = Rswift.StringResource(key: "GKx-cK-aVD.text", tableName: "HeaderView", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: المـنـتـدى
      ///
      /// Locales: ar
      static func gKxCKAVDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GKx-cK-aVD.text", tableName: "HeaderView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HeaderView", preferredLanguages: preferredLanguages) else {
          return "GKx-cK-aVD.text"
        }

        return NSLocalizedString("GKx-cK-aVD.text", tableName: "HeaderView", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.infoPlist` struct is generated, and contains static references to 0 localization keys.
    struct infoPlist {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 149 localization keys.
    struct localizable {
      /// en translation: ( Expired )
      ///
      /// Locales: ar, en
      static let expireSubscribtion = Rswift.StringResource(key: "ExpireSubscribtion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: 6 Monthes
      ///
      /// Locales: ar, en
      static let halfYear = Rswift.StringResource(key: "HalfYear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: AGREE
      ///
      /// Locales: ar, en
      static let agreE = Rswift.StringResource(key: "AGREE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Access for save photos in your gallery
      ///
      /// Locales: ar, en
      static let permissionPhotoLibraryDescription = Rswift.StringResource(key: "permission photoLibrary description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Access for your contacts and phones
      ///
      /// Locales: ar, en
      static let permissionContactsDescription = Rswift.StringResource(key: "permission contacts description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en
      static let add = Rswift.StringResource(key: "Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add Article
      ///
      /// Locales: en
      static let addArticle = Rswift.StringResource(key: "AddArticle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add New Comment
      ///
      /// Locales: en
      static let addComment = Rswift.StringResource(key: "AddComment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Adress
      ///
      /// Locales: ar, en
      static let adress = Rswift.StringResource(key: "Adress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow access to bluetooth
      ///
      /// Locales: ar, en
      static let permissionBluetoothDescription = Rswift.StringResource(key: "permission bluetooth description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow app for use camera
      ///
      /// Locales: ar, en
      static let permissionCameraDescription = Rswift.StringResource(key: "permission camera description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow record voice from app
      ///
      /// Locales: ar, en
      static let permissionMicrophoneDescription = Rswift.StringResource(key: "permission microphone description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow to access app-related data
      ///
      /// Locales: ar, en
      static let permissionTrackingDescription = Rswift.StringResource(key: "permission tracking description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow to access health data
      ///
      /// Locales: ar, en
      static let permissionHealthDescription = Rswift.StringResource(key: "permission health description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow to access your location
      ///
      /// Locales: ar, en
      static let permissionLocationAlwaysDescription = Rswift.StringResource(key: "permission location always description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow to access your location
      ///
      /// Locales: ar, en
      static let permissionLocationWhenInUseDescription = Rswift.StringResource(key: "permission location when in use description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow to check your media
      ///
      /// Locales: ar, en
      static let permissionMediaLibraryDescription = Rswift.StringResource(key: "permission media library description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow to check your voice
      ///
      /// Locales: ar, en
      static let permissionSpeechDescription = Rswift.StringResource(key: "permission speech description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow to record motion and environment-related data
      ///
      /// Locales: ar, en
      static let permissionMotionDescription = Rswift.StringResource(key: "permission motion description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allow using Face ID identity
      ///
      /// Locales: ar, en
      static let permissionFaceidDescription = Rswift.StringResource(key: "permission faceid description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allowed
      ///
      /// Locales: ar, en
      static let actionAllowed = Rswift.StringResource(key: "action allowed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Answer Questionnaire
      ///
      /// Locales: ar, en
      static let answerQuestionnaire = Rswift.StringResource(key: "AnswerQuestionnaire", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Application can add events to calendar
      ///
      /// Locales: ar, en
      static let permissionCalendarDescription = Rswift.StringResource(key: "permission calendar description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Application can create new task
      ///
      /// Locales: ar, en
      static let permissionRemindersDescription = Rswift.StringResource(key: "permission reminders description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Article Comments
      ///
      /// Locales: en
      static let articleComments = Rswift.StringResource(key: "ArticleComments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Article Subject
      ///
      /// Locales: en
      static let subjcetArticle = Rswift.StringResource(key: "SubjcetArticle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Article must be at least 120 and Maximum 250.
      ///
      /// Locales: ar, en
      static let articleBodyValidate = Rswift.StringResource(key: "articleBodyValidate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Ask
      ///
      /// Locales: ar, en
      static let ask = Rswift.StringResource(key: "ask", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Ask type of help
      ///
      /// Locales: ar, en
      static let askHelpType = Rswift.StringResource(key: "AskHelpType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Bluetooth
      ///
      /// Locales: ar, en
      static let permissionBluetoothName = Rswift.StringResource(key: "permission bluetooth name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: By
      ///
      /// Locales: ar, en
      static let payBy = Rswift.StringResource(key: "payBy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: By APPLE Pay
      ///
      /// Locales: ar, en
      static let byAPPLE = Rswift.StringResource(key: "ByAPPLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: By MADA
      ///
      /// Locales: ar, en
      static let byMADA = Rswift.StringResource(key: "ByMADA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: By MASTER Card
      ///
      /// Locales: ar, en
      static let byMASTER = Rswift.StringResource(key: "ByMASTER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: By VISA
      ///
      /// Locales: ar, en
      static let byVISA = Rswift.StringResource(key: "ByVISA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Calendar
      ///
      /// Locales: ar, en
      static let permissionCalendarName = Rswift.StringResource(key: "permission calendar name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: ar, en
      static let cameraLan = Rswift.StringResource(key: "camera.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: ar, en
      static let permissionCameraName = Rswift.StringResource(key: "permission camera name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ar, en
      static let cancelLan = Rswift.StringResource(key: "cancel.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ar, en
      static let deniedAlertCancel = Rswift.StringResource(key: "denied alert cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let cancelBtn = Rswift.StringResource(key: "cancelBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose subscribtion duration
      ///
      /// Locales: ar, en
      static let chooseSubscribtionDuration = Rswift.StringResource(key: "chooseSubscribtionDuration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Comment must be at least 3 and Maximum 240.
      ///
      /// Locales: en
      static let commentValidate = Rswift.StringResource(key: "commentValidate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Contact Information
      ///
      /// Locales: ar, en
      static let contactInformation = Rswift.StringResource(key: "ContactInformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Contacts
      ///
      /// Locales: ar, en
      static let permissionContactsName = Rswift.StringResource(key: "permission contacts name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: ar, en
      static let `continue` = Rswift.StringResource(key: "continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: ar, en
      static let actionAllow = Rswift.StringResource(key: "action allow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Denied
      ///
      /// Locales: ar, en
      static let actionDenied = Rswift.StringResource(key: "action denied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: ERROR
      ///
      /// Locales: ar, en
      static let erroR = Rswift.StringResource(key: "ERROR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: ar, en
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: End Date
      ///
      /// Locales: ar, en
      static let endSubscribtionDate = Rswift.StringResource(key: "EndSubscribtionDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: FaceID
      ///
      /// Locales: ar, en
      static let permissionFaceidName = Rswift.StringResource(key: "permission faceid name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Forum
      ///
      /// Locales: en
      static let fourmPage = Rswift.StringResource(key: "FourmPage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get important information without opening app.
      ///
      /// Locales: ar, en
      static let permissionNotificationDescription = Rswift.StringResource(key: "permission notification description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Health
      ///
      /// Locales: ar, en
      static let permissionHealthName = Rswift.StringResource(key: "permission health name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Hello
      ///
      /// Locales: ar, en
      static let hello = Rswift.StringResource(key: "Hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: ar, en
      static let help = Rswift.StringResource(key: "help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: In case that the request for assistance is approved, we will contact you with a trainee to solve your problem directly 
      ///
      /// Locales: ar, en
      static let urgentHelpSubTitle = Rswift.StringResource(key: "urgentHelpSubTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Joined
      ///
      /// Locales: ar, en
      static let joinedToIt = Rswift.StringResource(key: "joinedToIt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Location Always
      ///
      /// Locales: ar, en
      static let permissionLocationAlwaysName = Rswift.StringResource(key: "permission location always name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Location When Use
      ///
      /// Locales: ar, en
      static let permissionLocationWhenInUseName = Rswift.StringResource(key: "permission location when in use name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Look at
      ///
      /// Locales: ar, en
      static let lookAt = Rswift.StringResource(key: "LookAt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Media Library
      ///
      /// Locales: ar, en
      static let permissionMediaLibraryName = Rswift.StringResource(key: "permission media library name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: ar, en
      static let subject = Rswift.StringResource(key: "Subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Message sent successfully.
      ///
      /// Locales: ar, en
      static let messageSentSuccefully = Rswift.StringResource(key: "MessageSentSuccefully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Messages
      ///
      /// Locales: ar, en
      static let messagesHead = Rswift.StringResource(key: "MessagesHead", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Microphone
      ///
      /// Locales: ar, en
      static let permissionMicrophoneName = Rswift.StringResource(key: "permission microphone name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Mobile Number
      ///
      /// Locales: ar, en
      static let mobileNumber = Rswift.StringResource(key: "MobileNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Month
      ///
      /// Locales: ar, en
      static let oneMonth = Rswift.StringResource(key: "OneMonth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Motion
      ///
      /// Locales: ar, en
      static let permissionMotionName = Rswift.StringResource(key: "permission motion name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Need Permission
      ///
      /// Locales: ar, en
      static let titlesHeader = Rswift.StringResource(key: "titles header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: New Article
      ///
      /// Locales: en
      static let newArticle = Rswift.StringResource(key: "NewArticle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New Messages
      ///
      /// Locales: ar, en
      static let newMessages = Rswift.StringResource(key: "NewMessages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: No Comment
      ///
      /// Locales: ar, en
      static let noComment = Rswift.StringResource(key: "NoComment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: ar, en
      static let permissionNotificationName = Rswift.StringResource(key: "permission notification name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: ar, en
      static let userNotifications = Rswift.StringResource(key: "UserNotifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Now Easily
      ///
      /// Locales: ar, en
      static let nowEasliy = Rswift.StringResource(key: "NowEasliy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: PayNow
      ///
      /// Locales: ar, en
      static let payNow = Rswift.StringResource(key: "PayNow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Payment Failed
      ///
      /// Locales: ar, en
      static let paymentFailed = Rswift.StringResource(key: "Payment failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Payment Methods
      ///
      /// Locales: ar, en
      static let optionsPayment = Rswift.StringResource(key: "OptionsPayment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Payment Succesfully
      ///
      /// Locales: ar, en
      static let paymentSuccessfully = Rswift.StringResource(key: "Payment successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Permission denied
      ///
      /// Locales: ar, en
      static let deniedAlertTitle = Rswift.StringResource(key: "denied alert title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Permissions are necessary for the application to work and perform correctly. Push are not required permissions
      ///
      /// Locales: ar, en
      static let titlesComment = Rswift.StringResource(key: "titles comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Permissions request
      ///
      /// Locales: ar, en
      static let titlesSubHeader = Rswift.StringResource(key: "titles sub header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: ar, en
      static let phoneNumber = Rswift.StringResource(key: "PhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Photo Library
      ///
      /// Locales: ar, en
      static let permissionPhotoLibraryName = Rswift.StringResource(key: "permission photoLibrary name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Photo library
      ///
      /// Locales: ar, en
      static let photoLibraryLan = Rswift.StringResource(key: "photo.library.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Please, go to Settings and allow permission.
      ///
      /// Locales: ar, en
      static let deniedAlertDescription = Rswift.StringResource(key: "denied alert description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Problem
      ///
      /// Locales: ar, en
      static let problem = Rswift.StringResource(key: "problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Programs
      ///
      /// Locales: ar, en
      static let programs = Rswift.StringResource(key: "Programs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Re-subscribe
      ///
      /// Locales: ar, en
      static let reSubscribe = Rswift.StringResource(key: "ReSubscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Reminders
      ///
      /// Locales: ar, en
      static let permissionRemindersName = Rswift.StringResource(key: "permission reminders name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Report
      ///
      /// Locales: en
      static let report = Rswift.StringResource(key: "Report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Report Content
      ///
      /// Locales: en
      static let reportHeadContainer = Rswift.StringResource(key: "reportHeadContainer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Request Help
      ///
      /// Locales: ar, en
      static let requestHelp = Rswift.StringResource(key: "requestHelp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: SAR
      ///
      /// Locales: ar, en
      static let ksaCurrency = Rswift.StringResource(key: "KSACurrency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Save & Send
      ///
      /// Locales: ar, en
      static let saveSend = Rswift.StringResource(key: "save&send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en
      static let sendBtn = Rswift.StringResource(key: "sendBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send Help
      ///
      /// Locales: ar, en
      static let sendBtnUrgent = Rswift.StringResource(key: "SendBtnUrgent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Send Problem
      ///
      /// Locales: ar, en
      static let sendBtnProblem = Rswift.StringResource(key: "SendBtnProblem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: ar, en
      static let deniedAlertAction = Rswift.StringResource(key: "denied alert action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Show
      ///
      /// Locales: en
      static let showPage = Rswift.StringResource(key: "ShowPage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Show yor messages
      ///
      /// Locales: ar, en
      static let showMessagesHead = Rswift.StringResource(key: "showMessagesHead", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Siri
      ///
      /// Locales: ar, en
      static let permissionSiriName = Rswift.StringResource(key: "permission siri name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: ar, en
      static let skip = Rswift.StringResource(key: "skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Speech
      ///
      /// Locales: ar, en
      static let permissionSpeechName = Rswift.StringResource(key: "permission speech name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subcribtion Cost
      ///
      /// Locales: ar, en
      static let subcribtionCost = Rswift.StringResource(key: "SubcribtionCost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subcribtion Type
      ///
      /// Locales: ar, en
      static let subcribtionType = Rswift.StringResource(key: "SubcribtionType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subject Help
      ///
      /// Locales: ar, en
      static let subjectPlaceHolderUrgent = Rswift.StringResource(key: "SubjectPlaceHolderUrgent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subject Problem
      ///
      /// Locales: ar, en
      static let subjectPlaceHolderProblem = Rswift.StringResource(key: "SubjectPlaceHolderProblem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subject must be at least 3 and Maximum 24.
      ///
      /// Locales: ar, en
      static let articleSubjectValidate = Rswift.StringResource(key: "articleSubjectValidate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subscribe Now
      ///
      /// Locales: ar, en
      static let subscribeNow = Rswift.StringResource(key: "SubscribeNow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subscribe in Effah
      ///
      /// Locales: ar, en
      static let subscribeEffah = Rswift.StringResource(key: "subscribeEffah", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subscribtion Date
      ///
      /// Locales: ar, en
      static let startSubscribtionDate = Rswift.StringResource(key: "StartSubscribtionDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Subscribtion Details
      ///
      /// Locales: ar, en
      static let subscribtionDetails = Rswift.StringResource(key: "SubscribtionDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: ar, en
      static let termsPage = Rswift.StringResource(key: "termsPage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Thank you,Your message will be answered as soon as possible.
      ///
      /// Locales: ar, en
      static let contactUsMessageSent = Rswift.StringResource(key: "ContactUsMessageSent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Thanks for answer the questionnaire
      ///
      /// Locales: ar, en
      static let questionnaireSent = Rswift.StringResource(key: "QuestionnaireSent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Thanks for reporting this content
      ///
      /// Locales: ar, en
      static let reportMessage = Rswift.StringResource(key: "reportMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Thanks for reprot the content
      ///
      /// Locales: ar, en
      static let sendingReport = Rswift.StringResource(key: "sendingReport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Thanks for the article, it will review and publish as soon as possible
      ///
      /// Locales: ar, en
      static let sendingArticle = Rswift.StringResource(key: "sendingArticle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: There is a problem
      ///
      /// Locales: ar, en
      static let thereProblemTitle = Rswift.StringResource(key: "ThereProblemTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: There's
      ///
      /// Locales: ar, en
      static let founded = Rswift.StringResource(key: "founded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: These are the permissions the app requires to work properly. Please see description for each permission.
      ///
      /// Locales: ar, en
      static let titlesDescription = Rswift.StringResource(key: "titles description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Tracking
      ///
      /// Locales: ar, en
      static let permissionTrackingName = Rswift.StringResource(key: "permission tracking name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Try again
      ///
      /// Locales: ar, en
      static let tryAgain = Rswift.StringResource(key: "try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Type Help
      ///
      /// Locales: ar, en
      static let bodyPlaceHolderUrgent = Rswift.StringResource(key: "BodyPlaceHolderUrgent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Type Problem
      ///
      /// Locales: ar, en
      static let bodyPlaceHolderProblem = Rswift.StringResource(key: "BodyPlaceHolderProblem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Type Report Reason
      ///
      /// Locales: en
      static let typrReportReason = Rswift.StringResource(key: "typrReportReason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Type the article
      ///
      /// Locales: en
      static let writeArticle = Rswift.StringResource(key: "WriteArticle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Type your comment here if you want
      ///
      /// Locales: ar, en
      static let yourCommentHere = Rswift.StringResource(key: "YourCommentHere", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Type your message
      ///
      /// Locales: ar, en
      static let typeMessage = Rswift.StringResource(key: "TypeMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Urgent
      ///
      /// Locales: ar, en
      static let urgent = Rswift.StringResource(key: "urgent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Urgent Help
      ///
      /// Locales: ar, en
      static let urgentHelpTitle = Rswift.StringResource(key: "urgentHelpTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Year
      ///
      /// Locales: ar, en
      static let year = Rswift.StringResource(key: "Year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: You can answer qusetionnaire later
      ///
      /// Locales: ar, en
      static let skipQuestionnaire = Rswift.StringResource(key: "SkipQuestionnaire", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: You have a connection problem
      ///
      /// Locales: ar, en
      static let youHaveAConnectionProblem = Rswift.StringResource(key: "You have a connection problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: You have a problem connecting to the Internet try Call again and try again
      ///
      /// Locales: ar, en
      static let youHaveAProblemConnectingToTheInternetTryCallAgainAndTryAgain = Rswift.StringResource(key: "You have a problem connecting to the Internet try Call again and try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: You must choose payment method to complete
      ///
      /// Locales: ar, en
      static let requiredChoosePaymentMethod = Rswift.StringResource(key: "RequiredChoosePaymentMethod", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: You must choose your package at first
      ///
      /// Locales: ar, en
      static let requiredChoosePackage = Rswift.StringResource(key: "RequiredChoosePackage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: You send your problem and the trainee responds to you from through your personal messages
      ///
      /// Locales: ar, en
      static let thereProblemSubTitle = Rswift.StringResource(key: "ThereProblemSubTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: You will be able to use Siri
      ///
      /// Locales: ar, en
      static let permissionSiriDescription = Rswift.StringResource(key: "permission siri description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: comment sent succesfully it will review and publish as soon as possible
      ///
      /// Locales: en
      static let sendingComment = Rswift.StringResource(key: "sendingComment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: message must be less than 250 character and greater than 1 character
      ///
      /// Locales: ar, en
      static let errorMessageBodyContactUs = Rswift.StringResource(key: "ErrorMessageBodyContactUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: there's no new messages
      ///
      /// Locales: ar, en
      static let noMessages = Rswift.StringResource(key: "NoMessages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: there's no new messages with your friend
      ///
      /// Locales: ar, en
      static let noFriendMessages = Rswift.StringResource(key: "NoFriendMessages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: you must answer the required questions (*) or you can skip the quuestionnaire and answer it later
      ///
      /// Locales: ar, en
      static let requiredQuestionnaireQuestions = Rswift.StringResource(key: "RequiredQuestionnaireQuestions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: you must fill field first
      ///
      /// Locales: ar, en
      static let requierdFillField = Rswift.StringResource(key: "requierdFillField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: you must fill report reason first
      ///
      /// Locales: ar, en
      static let requierdFillReport = Rswift.StringResource(key: "requierdFillReport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)

      /// en translation: ( Expired )
      ///
      /// Locales: ar, en
      static func expireSubscribtion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ExpireSubscribtion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ExpireSubscribtion"
        }

        return NSLocalizedString("ExpireSubscribtion", bundle: bundle, comment: "")
      }

      /// en translation: 6 Monthes
      ///
      /// Locales: ar, en
      static func halfYear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HalfYear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HalfYear"
        }

        return NSLocalizedString("HalfYear", bundle: bundle, comment: "")
      }

      /// en translation: AGREE
      ///
      /// Locales: ar, en
      static func agreE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AGREE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AGREE"
        }

        return NSLocalizedString("AGREE", bundle: bundle, comment: "")
      }

      /// en translation: Access for save photos in your gallery
      ///
      /// Locales: ar, en
      static func permissionPhotoLibraryDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission photoLibrary description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission photoLibrary description"
        }

        return NSLocalizedString("permission photoLibrary description", bundle: bundle, comment: "")
      }

      /// en translation: Access for your contacts and phones
      ///
      /// Locales: ar, en
      static func permissionContactsDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission contacts description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission contacts description"
        }

        return NSLocalizedString("permission contacts description", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add"
        }

        return NSLocalizedString("Add", bundle: bundle, comment: "")
      }

      /// en translation: Add Article
      ///
      /// Locales: en
      static func addArticle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddArticle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddArticle"
        }

        return NSLocalizedString("AddArticle", bundle: bundle, comment: "")
      }

      /// en translation: Add New Comment
      ///
      /// Locales: en
      static func addComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddComment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddComment"
        }

        return NSLocalizedString("AddComment", bundle: bundle, comment: "")
      }

      /// en translation: Adress
      ///
      /// Locales: ar, en
      static func adress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Adress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Adress"
        }

        return NSLocalizedString("Adress", bundle: bundle, comment: "")
      }

      /// en translation: Allow access to bluetooth
      ///
      /// Locales: ar, en
      static func permissionBluetoothDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission bluetooth description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission bluetooth description"
        }

        return NSLocalizedString("permission bluetooth description", bundle: bundle, comment: "")
      }

      /// en translation: Allow app for use camera
      ///
      /// Locales: ar, en
      static func permissionCameraDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission camera description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission camera description"
        }

        return NSLocalizedString("permission camera description", bundle: bundle, comment: "")
      }

      /// en translation: Allow record voice from app
      ///
      /// Locales: ar, en
      static func permissionMicrophoneDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission microphone description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission microphone description"
        }

        return NSLocalizedString("permission microphone description", bundle: bundle, comment: "")
      }

      /// en translation: Allow to access app-related data
      ///
      /// Locales: ar, en
      static func permissionTrackingDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission tracking description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission tracking description"
        }

        return NSLocalizedString("permission tracking description", bundle: bundle, comment: "")
      }

      /// en translation: Allow to access health data
      ///
      /// Locales: ar, en
      static func permissionHealthDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission health description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission health description"
        }

        return NSLocalizedString("permission health description", bundle: bundle, comment: "")
      }

      /// en translation: Allow to access your location
      ///
      /// Locales: ar, en
      static func permissionLocationAlwaysDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission location always description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission location always description"
        }

        return NSLocalizedString("permission location always description", bundle: bundle, comment: "")
      }

      /// en translation: Allow to access your location
      ///
      /// Locales: ar, en
      static func permissionLocationWhenInUseDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission location when in use description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission location when in use description"
        }

        return NSLocalizedString("permission location when in use description", bundle: bundle, comment: "")
      }

      /// en translation: Allow to check your media
      ///
      /// Locales: ar, en
      static func permissionMediaLibraryDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission media library description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission media library description"
        }

        return NSLocalizedString("permission media library description", bundle: bundle, comment: "")
      }

      /// en translation: Allow to check your voice
      ///
      /// Locales: ar, en
      static func permissionSpeechDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission speech description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission speech description"
        }

        return NSLocalizedString("permission speech description", bundle: bundle, comment: "")
      }

      /// en translation: Allow to record motion and environment-related data
      ///
      /// Locales: ar, en
      static func permissionMotionDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission motion description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission motion description"
        }

        return NSLocalizedString("permission motion description", bundle: bundle, comment: "")
      }

      /// en translation: Allow using Face ID identity
      ///
      /// Locales: ar, en
      static func permissionFaceidDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission faceid description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission faceid description"
        }

        return NSLocalizedString("permission faceid description", bundle: bundle, comment: "")
      }

      /// en translation: Allowed
      ///
      /// Locales: ar, en
      static func actionAllowed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action allowed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action allowed"
        }

        return NSLocalizedString("action allowed", bundle: bundle, comment: "")
      }

      /// en translation: Answer Questionnaire
      ///
      /// Locales: ar, en
      static func answerQuestionnaire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AnswerQuestionnaire", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AnswerQuestionnaire"
        }

        return NSLocalizedString("AnswerQuestionnaire", bundle: bundle, comment: "")
      }

      /// en translation: Application can add events to calendar
      ///
      /// Locales: ar, en
      static func permissionCalendarDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission calendar description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission calendar description"
        }

        return NSLocalizedString("permission calendar description", bundle: bundle, comment: "")
      }

      /// en translation: Application can create new task
      ///
      /// Locales: ar, en
      static func permissionRemindersDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission reminders description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission reminders description"
        }

        return NSLocalizedString("permission reminders description", bundle: bundle, comment: "")
      }

      /// en translation: Article Comments
      ///
      /// Locales: en
      static func articleComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ArticleComments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ArticleComments"
        }

        return NSLocalizedString("ArticleComments", bundle: bundle, comment: "")
      }

      /// en translation: Article Subject
      ///
      /// Locales: en
      static func subjcetArticle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubjcetArticle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubjcetArticle"
        }

        return NSLocalizedString("SubjcetArticle", bundle: bundle, comment: "")
      }

      /// en translation: Article must be at least 120 and Maximum 250.
      ///
      /// Locales: ar, en
      static func articleBodyValidate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("articleBodyValidate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "articleBodyValidate"
        }

        return NSLocalizedString("articleBodyValidate", bundle: bundle, comment: "")
      }

      /// en translation: Ask
      ///
      /// Locales: ar, en
      static func ask(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ask", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ask"
        }

        return NSLocalizedString("ask", bundle: bundle, comment: "")
      }

      /// en translation: Ask type of help
      ///
      /// Locales: ar, en
      static func askHelpType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AskHelpType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AskHelpType"
        }

        return NSLocalizedString("AskHelpType", bundle: bundle, comment: "")
      }

      /// en translation: Bluetooth
      ///
      /// Locales: ar, en
      static func permissionBluetoothName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission bluetooth name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission bluetooth name"
        }

        return NSLocalizedString("permission bluetooth name", bundle: bundle, comment: "")
      }

      /// en translation: By
      ///
      /// Locales: ar, en
      static func payBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payBy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payBy"
        }

        return NSLocalizedString("payBy", bundle: bundle, comment: "")
      }

      /// en translation: By APPLE Pay
      ///
      /// Locales: ar, en
      static func byAPPLE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ByAPPLE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ByAPPLE"
        }

        return NSLocalizedString("ByAPPLE", bundle: bundle, comment: "")
      }

      /// en translation: By MADA
      ///
      /// Locales: ar, en
      static func byMADA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ByMADA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ByMADA"
        }

        return NSLocalizedString("ByMADA", bundle: bundle, comment: "")
      }

      /// en translation: By MASTER Card
      ///
      /// Locales: ar, en
      static func byMASTER(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ByMASTER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ByMASTER"
        }

        return NSLocalizedString("ByMASTER", bundle: bundle, comment: "")
      }

      /// en translation: By VISA
      ///
      /// Locales: ar, en
      static func byVISA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ByVISA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ByVISA"
        }

        return NSLocalizedString("ByVISA", bundle: bundle, comment: "")
      }

      /// en translation: Calendar
      ///
      /// Locales: ar, en
      static func permissionCalendarName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission calendar name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission calendar name"
        }

        return NSLocalizedString("permission calendar name", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: ar, en
      static func cameraLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera.lan"
        }

        return NSLocalizedString("camera.lan", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: ar, en
      static func permissionCameraName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission camera name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission camera name"
        }

        return NSLocalizedString("permission camera name", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ar, en
      static func cancelLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel.lan"
        }

        return NSLocalizedString("cancel.lan", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ar, en
      static func deniedAlertCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("denied alert cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "denied alert cancel"
        }

        return NSLocalizedString("denied alert cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func cancelBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancelBtn"
        }

        return NSLocalizedString("cancelBtn", bundle: bundle, comment: "")
      }

      /// en translation: Choose subscribtion duration
      ///
      /// Locales: ar, en
      static func chooseSubscribtionDuration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseSubscribtionDuration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chooseSubscribtionDuration"
        }

        return NSLocalizedString("chooseSubscribtionDuration", bundle: bundle, comment: "")
      }

      /// en translation: Comment must be at least 3 and Maximum 240.
      ///
      /// Locales: en
      static func commentValidate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commentValidate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commentValidate"
        }

        return NSLocalizedString("commentValidate", bundle: bundle, comment: "")
      }

      /// en translation: Contact Information
      ///
      /// Locales: ar, en
      static func contactInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ContactInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ContactInformation"
        }

        return NSLocalizedString("ContactInformation", bundle: bundle, comment: "")
      }

      /// en translation: Contacts
      ///
      /// Locales: ar, en
      static func permissionContactsName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission contacts name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission contacts name"
        }

        return NSLocalizedString("permission contacts name", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: ar, en
      static func `continue`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "continue"
        }

        return NSLocalizedString("continue", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: ar, en
      static func actionAllow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action allow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action allow"
        }

        return NSLocalizedString("action allow", bundle: bundle, comment: "")
      }

      /// en translation: Denied
      ///
      /// Locales: ar, en
      static func actionDenied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action denied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action denied"
        }

        return NSLocalizedString("action denied", bundle: bundle, comment: "")
      }

      /// en translation: ERROR
      ///
      /// Locales: ar, en
      static func erroR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ERROR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ERROR"
        }

        return NSLocalizedString("ERROR", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: ar, en
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: End Date
      ///
      /// Locales: ar, en
      static func endSubscribtionDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EndSubscribtionDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "EndSubscribtionDate"
        }

        return NSLocalizedString("EndSubscribtionDate", bundle: bundle, comment: "")
      }

      /// en translation: FaceID
      ///
      /// Locales: ar, en
      static func permissionFaceidName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission faceid name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission faceid name"
        }

        return NSLocalizedString("permission faceid name", bundle: bundle, comment: "")
      }

      /// en translation: Forum
      ///
      /// Locales: en
      static func fourmPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FourmPage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FourmPage"
        }

        return NSLocalizedString("FourmPage", bundle: bundle, comment: "")
      }

      /// en translation: Get important information without opening app.
      ///
      /// Locales: ar, en
      static func permissionNotificationDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission notification description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission notification description"
        }

        return NSLocalizedString("permission notification description", bundle: bundle, comment: "")
      }

      /// en translation: Health
      ///
      /// Locales: ar, en
      static func permissionHealthName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission health name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission health name"
        }

        return NSLocalizedString("permission health name", bundle: bundle, comment: "")
      }

      /// en translation: Hello
      ///
      /// Locales: ar, en
      static func hello(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hello", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hello"
        }

        return NSLocalizedString("Hello", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: ar, en
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help"
        }

        return NSLocalizedString("help", bundle: bundle, comment: "")
      }

      /// en translation: In case that the request for assistance is approved, we will contact you with a trainee to solve your problem directly 
      ///
      /// Locales: ar, en
      static func urgentHelpSubTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("urgentHelpSubTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "urgentHelpSubTitle"
        }

        return NSLocalizedString("urgentHelpSubTitle", bundle: bundle, comment: "")
      }

      /// en translation: Joined
      ///
      /// Locales: ar, en
      static func joinedToIt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("joinedToIt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "joinedToIt"
        }

        return NSLocalizedString("joinedToIt", bundle: bundle, comment: "")
      }

      /// en translation: Location Always
      ///
      /// Locales: ar, en
      static func permissionLocationAlwaysName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission location always name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission location always name"
        }

        return NSLocalizedString("permission location always name", bundle: bundle, comment: "")
      }

      /// en translation: Location When Use
      ///
      /// Locales: ar, en
      static func permissionLocationWhenInUseName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission location when in use name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission location when in use name"
        }

        return NSLocalizedString("permission location when in use name", bundle: bundle, comment: "")
      }

      /// en translation: Look at
      ///
      /// Locales: ar, en
      static func lookAt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LookAt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LookAt"
        }

        return NSLocalizedString("LookAt", bundle: bundle, comment: "")
      }

      /// en translation: Media Library
      ///
      /// Locales: ar, en
      static func permissionMediaLibraryName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission media library name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission media library name"
        }

        return NSLocalizedString("permission media library name", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: ar, en
      static func subject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Subject"
        }

        return NSLocalizedString("Subject", bundle: bundle, comment: "")
      }

      /// en translation: Message sent successfully.
      ///
      /// Locales: ar, en
      static func messageSentSuccefully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MessageSentSuccefully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MessageSentSuccefully"
        }

        return NSLocalizedString("MessageSentSuccefully", bundle: bundle, comment: "")
      }

      /// en translation: Messages
      ///
      /// Locales: ar, en
      static func messagesHead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MessagesHead", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MessagesHead"
        }

        return NSLocalizedString("MessagesHead", bundle: bundle, comment: "")
      }

      /// en translation: Microphone
      ///
      /// Locales: ar, en
      static func permissionMicrophoneName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission microphone name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission microphone name"
        }

        return NSLocalizedString("permission microphone name", bundle: bundle, comment: "")
      }

      /// en translation: Mobile Number
      ///
      /// Locales: ar, en
      static func mobileNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MobileNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MobileNumber"
        }

        return NSLocalizedString("MobileNumber", bundle: bundle, comment: "")
      }

      /// en translation: Month
      ///
      /// Locales: ar, en
      static func oneMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OneMonth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OneMonth"
        }

        return NSLocalizedString("OneMonth", bundle: bundle, comment: "")
      }

      /// en translation: Motion
      ///
      /// Locales: ar, en
      static func permissionMotionName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission motion name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission motion name"
        }

        return NSLocalizedString("permission motion name", bundle: bundle, comment: "")
      }

      /// en translation: Need Permission
      ///
      /// Locales: ar, en
      static func titlesHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("titles header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "titles header"
        }

        return NSLocalizedString("titles header", bundle: bundle, comment: "")
      }

      /// en translation: New Article
      ///
      /// Locales: en
      static func newArticle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NewArticle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NewArticle"
        }

        return NSLocalizedString("NewArticle", bundle: bundle, comment: "")
      }

      /// en translation: New Messages
      ///
      /// Locales: ar, en
      static func newMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NewMessages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NewMessages"
        }

        return NSLocalizedString("NewMessages", bundle: bundle, comment: "")
      }

      /// en translation: No Comment
      ///
      /// Locales: ar, en
      static func noComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoComment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoComment"
        }

        return NSLocalizedString("NoComment", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: ar, en
      static func permissionNotificationName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission notification name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission notification name"
        }

        return NSLocalizedString("permission notification name", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: ar, en
      static func userNotifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserNotifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserNotifications"
        }

        return NSLocalizedString("UserNotifications", bundle: bundle, comment: "")
      }

      /// en translation: Now Easily
      ///
      /// Locales: ar, en
      static func nowEasliy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NowEasliy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NowEasliy"
        }

        return NSLocalizedString("NowEasliy", bundle: bundle, comment: "")
      }

      /// en translation: PayNow
      ///
      /// Locales: ar, en
      static func payNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PayNow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PayNow"
        }

        return NSLocalizedString("PayNow", bundle: bundle, comment: "")
      }

      /// en translation: Payment Failed
      ///
      /// Locales: ar, en
      static func paymentFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment failed"
        }

        return NSLocalizedString("Payment failed", bundle: bundle, comment: "")
      }

      /// en translation: Payment Methods
      ///
      /// Locales: ar, en
      static func optionsPayment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OptionsPayment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OptionsPayment"
        }

        return NSLocalizedString("OptionsPayment", bundle: bundle, comment: "")
      }

      /// en translation: Payment Succesfully
      ///
      /// Locales: ar, en
      static func paymentSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment successfully"
        }

        return NSLocalizedString("Payment successfully", bundle: bundle, comment: "")
      }

      /// en translation: Permission denied
      ///
      /// Locales: ar, en
      static func deniedAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("denied alert title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "denied alert title"
        }

        return NSLocalizedString("denied alert title", bundle: bundle, comment: "")
      }

      /// en translation: Permissions are necessary for the application to work and perform correctly. Push are not required permissions
      ///
      /// Locales: ar, en
      static func titlesComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("titles comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "titles comment"
        }

        return NSLocalizedString("titles comment", bundle: bundle, comment: "")
      }

      /// en translation: Permissions request
      ///
      /// Locales: ar, en
      static func titlesSubHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("titles sub header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "titles sub header"
        }

        return NSLocalizedString("titles sub header", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: ar, en
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PhoneNumber"
        }

        return NSLocalizedString("PhoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Photo Library
      ///
      /// Locales: ar, en
      static func permissionPhotoLibraryName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission photoLibrary name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission photoLibrary name"
        }

        return NSLocalizedString("permission photoLibrary name", bundle: bundle, comment: "")
      }

      /// en translation: Photo library
      ///
      /// Locales: ar, en
      static func photoLibraryLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photo.library.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photo.library.lan"
        }

        return NSLocalizedString("photo.library.lan", bundle: bundle, comment: "")
      }

      /// en translation: Please, go to Settings and allow permission.
      ///
      /// Locales: ar, en
      static func deniedAlertDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("denied alert description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "denied alert description"
        }

        return NSLocalizedString("denied alert description", bundle: bundle, comment: "")
      }

      /// en translation: Problem
      ///
      /// Locales: ar, en
      static func problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "problem"
        }

        return NSLocalizedString("problem", bundle: bundle, comment: "")
      }

      /// en translation: Programs
      ///
      /// Locales: ar, en
      static func programs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Programs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Programs"
        }

        return NSLocalizedString("Programs", bundle: bundle, comment: "")
      }

      /// en translation: Re-subscribe
      ///
      /// Locales: ar, en
      static func reSubscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ReSubscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ReSubscribe"
        }

        return NSLocalizedString("ReSubscribe", bundle: bundle, comment: "")
      }

      /// en translation: Reminders
      ///
      /// Locales: ar, en
      static func permissionRemindersName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission reminders name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission reminders name"
        }

        return NSLocalizedString("permission reminders name", bundle: bundle, comment: "")
      }

      /// en translation: Report
      ///
      /// Locales: en
      static func report(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report"
        }

        return NSLocalizedString("Report", bundle: bundle, comment: "")
      }

      /// en translation: Report Content
      ///
      /// Locales: en
      static func reportHeadContainer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reportHeadContainer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reportHeadContainer"
        }

        return NSLocalizedString("reportHeadContainer", bundle: bundle, comment: "")
      }

      /// en translation: Request Help
      ///
      /// Locales: ar, en
      static func requestHelp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("requestHelp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "requestHelp"
        }

        return NSLocalizedString("requestHelp", bundle: bundle, comment: "")
      }

      /// en translation: SAR
      ///
      /// Locales: ar, en
      static func ksaCurrency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KSACurrency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "KSACurrency"
        }

        return NSLocalizedString("KSACurrency", bundle: bundle, comment: "")
      }

      /// en translation: Save & Send
      ///
      /// Locales: ar, en
      static func saveSend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save&send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save&send"
        }

        return NSLocalizedString("save&send", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en
      static func sendBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendBtn"
        }

        return NSLocalizedString("sendBtn", bundle: bundle, comment: "")
      }

      /// en translation: Send Help
      ///
      /// Locales: ar, en
      static func sendBtnUrgent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SendBtnUrgent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SendBtnUrgent"
        }

        return NSLocalizedString("SendBtnUrgent", bundle: bundle, comment: "")
      }

      /// en translation: Send Problem
      ///
      /// Locales: ar, en
      static func sendBtnProblem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SendBtnProblem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SendBtnProblem"
        }

        return NSLocalizedString("SendBtnProblem", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: ar, en
      static func deniedAlertAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("denied alert action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "denied alert action"
        }

        return NSLocalizedString("denied alert action", bundle: bundle, comment: "")
      }

      /// en translation: Show
      ///
      /// Locales: en
      static func showPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ShowPage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShowPage"
        }

        return NSLocalizedString("ShowPage", bundle: bundle, comment: "")
      }

      /// en translation: Show yor messages
      ///
      /// Locales: ar, en
      static func showMessagesHead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("showMessagesHead", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "showMessagesHead"
        }

        return NSLocalizedString("showMessagesHead", bundle: bundle, comment: "")
      }

      /// en translation: Siri
      ///
      /// Locales: ar, en
      static func permissionSiriName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission siri name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission siri name"
        }

        return NSLocalizedString("permission siri name", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: ar, en
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "skip"
        }

        return NSLocalizedString("skip", bundle: bundle, comment: "")
      }

      /// en translation: Speech
      ///
      /// Locales: ar, en
      static func permissionSpeechName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission speech name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission speech name"
        }

        return NSLocalizedString("permission speech name", bundle: bundle, comment: "")
      }

      /// en translation: Subcribtion Cost
      ///
      /// Locales: ar, en
      static func subcribtionCost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubcribtionCost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubcribtionCost"
        }

        return NSLocalizedString("SubcribtionCost", bundle: bundle, comment: "")
      }

      /// en translation: Subcribtion Type
      ///
      /// Locales: ar, en
      static func subcribtionType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubcribtionType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubcribtionType"
        }

        return NSLocalizedString("SubcribtionType", bundle: bundle, comment: "")
      }

      /// en translation: Subject Help
      ///
      /// Locales: ar, en
      static func subjectPlaceHolderUrgent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubjectPlaceHolderUrgent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubjectPlaceHolderUrgent"
        }

        return NSLocalizedString("SubjectPlaceHolderUrgent", bundle: bundle, comment: "")
      }

      /// en translation: Subject Problem
      ///
      /// Locales: ar, en
      static func subjectPlaceHolderProblem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubjectPlaceHolderProblem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubjectPlaceHolderProblem"
        }

        return NSLocalizedString("SubjectPlaceHolderProblem", bundle: bundle, comment: "")
      }

      /// en translation: Subject must be at least 3 and Maximum 24.
      ///
      /// Locales: ar, en
      static func articleSubjectValidate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("articleSubjectValidate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "articleSubjectValidate"
        }

        return NSLocalizedString("articleSubjectValidate", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe Now
      ///
      /// Locales: ar, en
      static func subscribeNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubscribeNow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubscribeNow"
        }

        return NSLocalizedString("SubscribeNow", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe in Effah
      ///
      /// Locales: ar, en
      static func subscribeEffah(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscribeEffah", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscribeEffah"
        }

        return NSLocalizedString("subscribeEffah", bundle: bundle, comment: "")
      }

      /// en translation: Subscribtion Date
      ///
      /// Locales: ar, en
      static func startSubscribtionDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StartSubscribtionDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StartSubscribtionDate"
        }

        return NSLocalizedString("StartSubscribtionDate", bundle: bundle, comment: "")
      }

      /// en translation: Subscribtion Details
      ///
      /// Locales: ar, en
      static func subscribtionDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubscribtionDetails", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubscribtionDetails"
        }

        return NSLocalizedString("SubscribtionDetails", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: ar, en
      static func termsPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("termsPage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "termsPage"
        }

        return NSLocalizedString("termsPage", bundle: bundle, comment: "")
      }

      /// en translation: Thank you,Your message will be answered as soon as possible.
      ///
      /// Locales: ar, en
      static func contactUsMessageSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ContactUsMessageSent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ContactUsMessageSent"
        }

        return NSLocalizedString("ContactUsMessageSent", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for answer the questionnaire
      ///
      /// Locales: ar, en
      static func questionnaireSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QuestionnaireSent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "QuestionnaireSent"
        }

        return NSLocalizedString("QuestionnaireSent", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for reporting this content
      ///
      /// Locales: ar, en
      static func reportMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reportMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reportMessage"
        }

        return NSLocalizedString("reportMessage", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for reprot the content
      ///
      /// Locales: ar, en
      static func sendingReport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendingReport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendingReport"
        }

        return NSLocalizedString("sendingReport", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for the article, it will review and publish as soon as possible
      ///
      /// Locales: ar, en
      static func sendingArticle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendingArticle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendingArticle"
        }

        return NSLocalizedString("sendingArticle", bundle: bundle, comment: "")
      }

      /// en translation: There is a problem
      ///
      /// Locales: ar, en
      static func thereProblemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ThereProblemTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ThereProblemTitle"
        }

        return NSLocalizedString("ThereProblemTitle", bundle: bundle, comment: "")
      }

      /// en translation: There's
      ///
      /// Locales: ar, en
      static func founded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("founded", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "founded"
        }

        return NSLocalizedString("founded", bundle: bundle, comment: "")
      }

      /// en translation: These are the permissions the app requires to work properly. Please see description for each permission.
      ///
      /// Locales: ar, en
      static func titlesDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("titles description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "titles description"
        }

        return NSLocalizedString("titles description", bundle: bundle, comment: "")
      }

      /// en translation: Tracking
      ///
      /// Locales: ar, en
      static func permissionTrackingName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission tracking name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission tracking name"
        }

        return NSLocalizedString("permission tracking name", bundle: bundle, comment: "")
      }

      /// en translation: Try again
      ///
      /// Locales: ar, en
      static func tryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "try again"
        }

        return NSLocalizedString("try again", bundle: bundle, comment: "")
      }

      /// en translation: Type Help
      ///
      /// Locales: ar, en
      static func bodyPlaceHolderUrgent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BodyPlaceHolderUrgent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BodyPlaceHolderUrgent"
        }

        return NSLocalizedString("BodyPlaceHolderUrgent", bundle: bundle, comment: "")
      }

      /// en translation: Type Problem
      ///
      /// Locales: ar, en
      static func bodyPlaceHolderProblem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BodyPlaceHolderProblem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BodyPlaceHolderProblem"
        }

        return NSLocalizedString("BodyPlaceHolderProblem", bundle: bundle, comment: "")
      }

      /// en translation: Type Report Reason
      ///
      /// Locales: en
      static func typrReportReason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("typrReportReason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "typrReportReason"
        }

        return NSLocalizedString("typrReportReason", bundle: bundle, comment: "")
      }

      /// en translation: Type the article
      ///
      /// Locales: en
      static func writeArticle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WriteArticle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WriteArticle"
        }

        return NSLocalizedString("WriteArticle", bundle: bundle, comment: "")
      }

      /// en translation: Type your comment here if you want
      ///
      /// Locales: ar, en
      static func yourCommentHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YourCommentHere", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YourCommentHere"
        }

        return NSLocalizedString("YourCommentHere", bundle: bundle, comment: "")
      }

      /// en translation: Type your message
      ///
      /// Locales: ar, en
      static func typeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TypeMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TypeMessage"
        }

        return NSLocalizedString("TypeMessage", bundle: bundle, comment: "")
      }

      /// en translation: Urgent
      ///
      /// Locales: ar, en
      static func urgent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("urgent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "urgent"
        }

        return NSLocalizedString("urgent", bundle: bundle, comment: "")
      }

      /// en translation: Urgent Help
      ///
      /// Locales: ar, en
      static func urgentHelpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("urgentHelpTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "urgentHelpTitle"
        }

        return NSLocalizedString("urgentHelpTitle", bundle: bundle, comment: "")
      }

      /// en translation: Year
      ///
      /// Locales: ar, en
      static func year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Year"
        }

        return NSLocalizedString("Year", bundle: bundle, comment: "")
      }

      /// en translation: You can answer qusetionnaire later
      ///
      /// Locales: ar, en
      static func skipQuestionnaire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SkipQuestionnaire", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SkipQuestionnaire"
        }

        return NSLocalizedString("SkipQuestionnaire", bundle: bundle, comment: "")
      }

      /// en translation: You have a connection problem
      ///
      /// Locales: ar, en
      static func youHaveAConnectionProblem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have a connection problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have a connection problem"
        }

        return NSLocalizedString("You have a connection problem", bundle: bundle, comment: "")
      }

      /// en translation: You have a problem connecting to the Internet try Call again and try again
      ///
      /// Locales: ar, en
      static func youHaveAProblemConnectingToTheInternetTryCallAgainAndTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have a problem connecting to the Internet try Call again and try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have a problem connecting to the Internet try Call again and try again"
        }

        return NSLocalizedString("You have a problem connecting to the Internet try Call again and try again", bundle: bundle, comment: "")
      }

      /// en translation: You must choose payment method to complete
      ///
      /// Locales: ar, en
      static func requiredChoosePaymentMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RequiredChoosePaymentMethod", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RequiredChoosePaymentMethod"
        }

        return NSLocalizedString("RequiredChoosePaymentMethod", bundle: bundle, comment: "")
      }

      /// en translation: You must choose your package at first
      ///
      /// Locales: ar, en
      static func requiredChoosePackage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RequiredChoosePackage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RequiredChoosePackage"
        }

        return NSLocalizedString("RequiredChoosePackage", bundle: bundle, comment: "")
      }

      /// en translation: You send your problem and the trainee responds to you from through your personal messages
      ///
      /// Locales: ar, en
      static func thereProblemSubTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ThereProblemSubTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ThereProblemSubTitle"
        }

        return NSLocalizedString("ThereProblemSubTitle", bundle: bundle, comment: "")
      }

      /// en translation: You will be able to use Siri
      ///
      /// Locales: ar, en
      static func permissionSiriDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission siri description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission siri description"
        }

        return NSLocalizedString("permission siri description", bundle: bundle, comment: "")
      }

      /// en translation: comment sent succesfully it will review and publish as soon as possible
      ///
      /// Locales: en
      static func sendingComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendingComment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendingComment"
        }

        return NSLocalizedString("sendingComment", bundle: bundle, comment: "")
      }

      /// en translation: message must be less than 250 character and greater than 1 character
      ///
      /// Locales: ar, en
      static func errorMessageBodyContactUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorMessageBodyContactUs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorMessageBodyContactUs"
        }

        return NSLocalizedString("ErrorMessageBodyContactUs", bundle: bundle, comment: "")
      }

      /// en translation: there's no new messages
      ///
      /// Locales: ar, en
      static func noMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoMessages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoMessages"
        }

        return NSLocalizedString("NoMessages", bundle: bundle, comment: "")
      }

      /// en translation: there's no new messages with your friend
      ///
      /// Locales: ar, en
      static func noFriendMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoFriendMessages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoFriendMessages"
        }

        return NSLocalizedString("NoFriendMessages", bundle: bundle, comment: "")
      }

      /// en translation: you must answer the required questions (*) or you can skip the quuestionnaire and answer it later
      ///
      /// Locales: ar, en
      static func requiredQuestionnaireQuestions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RequiredQuestionnaireQuestions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RequiredQuestionnaireQuestions"
        }

        return NSLocalizedString("RequiredQuestionnaireQuestions", bundle: bundle, comment: "")
      }

      /// en translation: you must fill field first
      ///
      /// Locales: ar, en
      static func requierdFillField(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("requierdFillField", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "requierdFillField"
        }

        return NSLocalizedString("requierdFillField", bundle: bundle, comment: "")
      }

      /// en translation: you must fill report reason first
      ///
      /// Locales: ar, en
      static func requierdFillReport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("requierdFillReport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "requierdFillReport"
        }

        return NSLocalizedString("requierdFillReport", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BannerCell.validate()
      try _EmptyScreen.validate()
      try _HeaderView.validate()
      try _MaintanceScreen.validate()
      try _NetworkFailScreen.validate()
    }

    struct _BannerCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BannerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BannerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BannerCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "banner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'banner' is used in nib 'BannerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BarView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CustomTabBarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomTabBarView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EmptyScreen: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyScreen"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "emptyWhiteBox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptyWhiteBox' is used in nib 'EmptyScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundOff' is used in nib 'EmptyScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "forthTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'forthTextColor' is used in nib 'EmptyScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondTextColor' is used in nib 'EmptyScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group' is used in nib 'HeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "layer10", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'layer10' is used in nib 'HeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in nib 'HeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkCyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkCyan' is used in nib 'HeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MaintanceScreen: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MaintanceScreen"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ellipse782", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ellipse782' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundOff' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "forthTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'forthTextColor' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondTextColor' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MovieCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MovieCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCell
      }

      fileprivate init() {}
    }

    struct _NetworkFailScreen: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NetworkFailScreen"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rectangle7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rectangle7' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundOff' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "forthTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'forthTextColor' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try moviesStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try noonWebView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splashStoryboard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct moviesStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MoviesVC

      let bundle = R.hostingBundle
      let moviesVC = StoryboardViewControllerResource<MoviesVC>(identifier: "MoviesVC")
      let name = "MoviesStoryboard"

      func moviesVC(_: Void = ()) -> MoviesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moviesVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "accentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accentColor' is used in storyboard 'MoviesStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in storyboard 'MoviesStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.moviesStoryboard().moviesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moviesVC' could not be loaded from storyboard 'MoviesStoryboard' as 'MoviesVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct noonWebView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoonWebView"
      let noonWebView = StoryboardViewControllerResource<NoonWebView>(identifier: "NoonWebView")

      func noonWebView(_: Void = ()) -> NoonWebView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noonWebView)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.noonWebView().noonWebView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noonWebView' could not be loaded from storyboard 'NoonWebView' as 'NoonWebView'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splashStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashVC

      let bundle = R.hostingBundle
      let name = "SplashStoryboard"
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")

      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splashStoryboard().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'SplashStoryboard' as 'SplashVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
